/*
 * This is copied from the objectified OpenAPI generator.
 * Do not edit this file.
 */

import { DaoUtils } from './DaoUtils';

/**
 * This is a base DAO layer that is used by auto-generated DAO files.  It provides basic CRUD operations for
 * each table in the database, as defined by the OpenAPI specification.
 *
 * @param T The DTO type that this DAO is responsible for.
 */
export class BaseDao<T> {
  /**
   * Keeps track of the database table name that this DAO is responsible for.
   *
   * @param tableName {string} containing the name of the table.
   */
  constructor(private readonly tableName: string) { }

  /**
   * Returns all records from the database table.
   *
   * @returns {Promise<void | T[]>} containing the records from the database table, void if empty.
   */
  public async getAll(): Promise<void | T[]> {
    const db = DaoUtils.getDatabase();
    const sql = `SELECT * FROM ${this.tableName}`;

    return (await db.any(sql))
      .map(x => DaoUtils.normalize<T>(x));
  }

  /**
   * Retrieves an object by its ID.
   *
   * @param id {number} containing the ID of the object to retrieve.
   */
  public async getById(id: number): Promise<void | T> {
    const db = DaoUtils.getDatabase();
    const sql = `SELECT * FROM ${this.tableName} WHERE id=$[id]`;

    return db.oneOrNone(sql, { id })
      .then((data: any) => DaoUtils.normalize(data));
  }

  /**
   * Creates a new record.
   *
   * @param data {T} containing the data to insert into the database.
   * @returns {Promise<void | T>} containing the newly created record, void if empty.
   */
  public async create(data: T): Promise<void | T> {
    const db = DaoUtils.getDatabase();
    const sql = DaoUtils.generateInsertSql(this.tableName, data);

    return db.one(sql, data)
      .then((data: any) => DaoUtils.normalize(data));
  }

  /**
   * Deletes a record by its ID.
   *
   * @param id {number} containing the ID of the record to delete.
   */
  public async deleteById(id: number): Promise<void> {
    const db = DaoUtils.getDatabase();
    const sql = `DELETE FROM ${this.tableName} WHERE id=$[id]`;

    return db.none(sql, { id });
  }

  /**
   * Updates a record by its ID.
   *
   * @param id {number} the ID of the record to update.
   * @param data {T} the data to update the record with.
   * @returns {Promise<void | T>} containing the record after update, void if empty.
   */
  public async updateById(id: number, data: T): Promise<void | T> {
    const db = DaoUtils.getDatabase();
    const sql = DaoUtils.generateUpdateSql(this.tableName, data);

    return db.one(sql, {
      ...data,
      id,
    })
      .then((data: any) => DaoUtils.normalize(data));
  }

  /**
   * Retrieves an object in the database using a where clause.  The key/value entries in the where clause
   * indicate the names of the columns to search.
   *
   * @param where {any} containing the where clause to search for, key/value pairs of column names and values.
   */
  public async findOne(where: any): Promise<void | T> {
    const db = DaoUtils.getDatabase();
    const sql = DaoUtils.generateSelectSql(this.tableName, where) + " LIMIT 1";

    return db.oneOrNone(sql, where)
      .then((data: any) => DaoUtils.normalize(data));
  }
}