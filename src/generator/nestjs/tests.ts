import {initCap, propertyToType, toCamelCase} from "../util";

const HEADER: string = `/**\n * This file is automatically generated.\n * Do not modify this file, any changes will be overwritten.\n *\n * Generated ${new Date()}\n */\n\n`;

export function generateTests(controllerDirectory: string, openApi: any) {
  const fs = require('fs');
  const tags: any = {};
  const paths = openApi.paths;

  fs.rmSync('tests/generated', { recursive: true, force: true });
  fs.mkdirSync('tests/generated', { recursive: true });

  const schemas = openApi.components.schemas;

  // Step 2: walk the list of tags, and write all controllers for each tag
  for (const schemaName of Object.keys(schemas)) {
    generateTest('tests/generated', schemaName, schemas[schemaName].required ?? []);
  }
}

function generateTest(directory: string, name: string, required: string[]) {
  const fs = require('fs');
  const testFile = `${directory}/${name}.test.ts`;
  const testHeader = HEADER;
  let testBody = '';

  // Headers
  testBody += 'import { JSONSchemaFaker } from "json-schema-faker";\n';
  testBody += 'import * as dtos from \'../../src/generated/dto\';\n\n';

  // Test code body
  testBody += `describe('${name} object test', () => {\n`;
  testBody += '  it(\'should instantiate a random object and validate it\', () => {\n';
  testBody += `    const obj = JSONSchemaFaker.generate(dtos.${name}Dto.schema);\n`;
  testBody += `    const valid = dtos.${name}Dto.validate(obj);\n\n`;
  testBody += '    expect(valid).toEqual(true);\n';
  testBody += '  });\n';

  if (required) {
    testBody += '\n';
    testBody += '  it(\'should instantiate a random object that will fail validation\', () => {\n';
    testBody += `    const obj = JSONSchemaFaker.generate(dtos.${name}Dto.schema);\n\n`;
    testBody += `    obj.${required[randomNumber(0, required.length)]} = null;\n\n`;
    testBody += `    const valid = dtos.${name}Dto.validate(obj);\n\n`;
    testBody += '    expect(valid).toEqual(false);\n';
    testBody += '  })\n';
  }

  testBody += '});\n';

  const testData = testHeader + testBody;

  fs.writeFileSync(testFile, testData);
  console.log(`  - Wrote ${testFile}`);
}

function randomNumber(x: number, y: number): number {
  return Math.floor(Math.random() * (y - x));
}